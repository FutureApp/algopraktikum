1 was macht der algo
	- Multipliziert zwei Matrizen
	- Zeilen und Spalten so lange shiften bis der "richtige" Partner für die Multiplikation partner ist 
	Also Zahlen aus erster Spalte von Matrix A mit Zahlen aus erster Reihe von Matrix B multiplizieren  
	
	Masternode macht das:
		for i = 0 to m-1 do
		for j = 0 to n-1 do
		cij = 0 (i,j hier index)
		for k= 0 to q-1 do
		cij = cij + aik * bkj
		end for k
		end for j
		end for i

	“Slave” Process’s (Algorithm Paralleler Teil):
		
		- Receive initial submatrices from master
		- Determine IDs (ranks) of mesh neighbors
		- Multiple local submatrices
		- For Sqrt(# of processors)-1 times do
		- Shift A submatrices West
		- Shift B submatrices North
		- Multiple local submatrices
		- end for
		- Send resulting submatrices back to master
	
2 groesse der matrix -> wie wieviele worker
	- nxn Matrix jeder process hat m * m Werte mit m=n/sqrt(p)
	

3 was macht select
	- Mit select() wartet man auf Input von anderen Clients in dem von den Nodes. 
		 
	/* Initialize the set of active sockets. */
	FD_ZERO (&active_fd_set);
	FD_SET (sock, &active_fd_set);

	while (1)
		{
		/* Block until input arrives on one or more active sockets. */
		read_fd_set = active_fd_set;
		if (select (FD_SETSIZE, &read_fd_set, NULL, NULL, NULL) < 0)
        {
          perror ("select");
          exit (EXIT_FAILURE);
        }


4 mache eine 2-d cartesiche matrix communicator




5 wie werden die werte verteilt





6 wie werden die werte geschrieben






--------Hier ein Beispielcode im grossen und ganzen  wurden die Funktionen aus der Assignment4 benutzt----------
////Nur hier wurden nicht nur shifts up and left benutzt sondern auch right and down	


#include<stdio.h>
#include<stdlib.h>
#include<mpi.h>

int main(int argc,char *argv[])
{
   int rank,size,row=0,column=0,count=0,i=0,j=0,k=0;
   char ch;
   float *A,*B,*C,a=0,b=0,c=0,n;
   FILE *fp;
   MPI_Init(NULL,NULL);
   MPI_Comm_size(MPI_COMM_WORLD,&size);
   MPI_Comm_rank(MPI_COMM_WORLD,&rank);
   if(rank==0)
   {
    fp=fopen("A.txt","r");
    while(fscanf(fp,"%f",&n)!=-1)
    { 
      ch=fgetc(fp);
      if(ch=='\n'){ row=row+1; }
      count++;
    }
    column=count/row; 
    if(count!=size) { printf("No of Proc must be equal to %d\nCode terminated",count); exit(0); }
    fseek( fp, 0, SEEK_SET );
    A=(float*)calloc(sizeof(float),row*column);
    B=(float*)calloc(sizeof(float),row*column);
    k=0;
    printf("A matrix:\n");
    for(i=0;i<row;i++) 
    {
       for(j=0;j<column;j++)
       {
          fscanf(fp,"%f",&n);
          A[k]=n;
          printf("%f\t",A[k]);
          k++; 
       } 
       printf("\n"); 
    }
    fclose(fp);
    k=0;
    printf("\nB matrix:\n");
    fp=fopen("B.txt","r");
    for(i=0;i<row;i++) 
    {
       for(j=0;j<column;j++)
       {
          fscanf(fp,"%f",&n);
          B[k]=n; 
          printf("%f\t",B[k]);
          k++; 
       }
       printf("\n");  
    } 
    fclose(fp);
   }
   MPI_Bcast(&row,1,MPI_INT,0,MPI_COMM_WORLD);
   int periods[]={1,1}; //both vertical and horizontal movement; 
   int dims[]={row,row};
   int coords[2]; /* 2 Dimension topology so 2 coordinates */
   int right=0, left=0, down=0, up=0;    // neighbor ranks
   MPI_Comm cart_comm;
   MPI_Cart_create(MPI_COMM_WORLD,2,dims,periods,1,&cart_comm );
   MPI_Scatter(A,1,MPI_FLOAT,&a,1,MPI_FLOAT,0,cart_comm);
   MPI_Scatter(B,1,MPI_FLOAT,&b,1,MPI_FLOAT,0,cart_comm);
   MPI_Comm_rank(cart_comm,&rank);
   MPI_Cart_coords(cart_comm,rank,2,coords);
   MPI_Cart_shift(cart_comm, 1, coords[0], &left,&right);
   MPI_Cart_shift(cart_comm, 0, coords[1], &up,&down);
   MPI_Sendrecv_replace(&a,1,MPI_FLOAT,left,11,right,11,cart_comm,MPI_STATUS_IGNORE);
   MPI_Sendrecv_replace(&b,1,MPI_FLOAT,up,11,down,11,cart_comm,MPI_STATUS_IGNORE);
   c = c + a*b;
   for(i=1;i<row;i++)
   {
     MPI_Cart_shift(cart_comm, 1, 1, &left,&right);
     MPI_Cart_shift(cart_comm, 0, 1, &up,&down);
     MPI_Sendrecv_replace(&a,1,MPI_FLOAT,left,11,right,11,cart_comm,MPI_STATUS_IGNORE);
     MPI_Sendrecv_replace(&b,1,MPI_FLOAT,up,11,down,11,cart_comm,MPI_STATUS_IGNORE);
     c = c + a*b;
   }
   C=(float*)calloc(sizeof(float),row*row);
   MPI_Gather(&c,1,MPI_FLOAT,C,1,MPI_FLOAT,0,cart_comm);
   if(rank==0)
   {
      k=0; 
      printf("\nA * B:\n");
      for(i=0;i<row;i++)
      {
         for(j=0;j<row;j++)
         {
            printf("%f\t",C[k]);
            k++;
         }    
         printf("\n");
      }
   }
   MPI_Finalize();
   return 0;
}